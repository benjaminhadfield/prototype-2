"use strict";function setResponderAndExtractTransfer(e,t,r,n){var o=isStartish(e)?eventTypes.startShouldSetResponder:isMoveish(e)?eventTypes.moveShouldSetResponder:"topSelectionChange"===e?eventTypes.selectionChangeShouldSetResponder:eventTypes.scrollShouldSetResponder,s=responderInst?EventPluginUtils.getLowestCommonAncestor(responderInst,t):t,i=s===responderInst,a=ResponderSyntheticEvent.getPooled(o,s,r,n);a.touchHistory=ResponderTouchHistoryStore.touchHistory;i?EventPropagators.accumulateTwoPhaseDispatchesSkipTarget(a):EventPropagators.accumulateTwoPhaseDispatches(a);var c=executeDispatchesInOrderStopAtTrue(a);a.isPersistent()||a.constructor.release(a);if(!c||c===responderInst){return null}var u,d=ResponderSyntheticEvent.getPooled(eventTypes.responderGrant,c,r,n);d.touchHistory=ResponderTouchHistoryStore.touchHistory;EventPropagators.accumulateDirectDispatches(d);var p=executeDirectDispatch(d)===!0;if(responderInst){var l=ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest,responderInst,r,n);l.touchHistory=ResponderTouchHistoryStore.touchHistory;EventPropagators.accumulateDirectDispatches(l);var h=!hasDispatches(l)||executeDirectDispatch(l);l.isPersistent()||l.constructor.release(l);if(h){var v=ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate,responderInst,r,n);v.touchHistory=ResponderTouchHistoryStore.touchHistory;EventPropagators.accumulateDirectDispatches(v);u=accumulate(u,[d,v]);changeResponder(c,p)}else{var R=ResponderSyntheticEvent.getPooled(eventTypes.responderReject,c,r,n);R.touchHistory=ResponderTouchHistoryStore.touchHistory;EventPropagators.accumulateDirectDispatches(R);u=accumulate(u,R)}}else{u=accumulate(u,d);changeResponder(c,p)}return u}function canTriggerTransfer(e,t,r){return t&&("topScroll"===e&&!r.responderIgnoreScroll||trackedTouchCount>0&&"topSelectionChange"===e||isStartish(e)||isMoveish(e))}function noResponderTouches(e){var t=e.touches;if(!t||0===t.length){return!0}for(var r=0;r<t.length;r++){var n=t[r],o=n.target;if(null!==o&&void 0!==o&&0!==o){var s=EventPluginUtils.getInstanceFromNode(o);if(EventPluginUtils.isAncestor(responderInst,s)){return!1}}}return!0}var EventPluginUtils=require("./EventPluginUtils"),EventPropagators=require("./EventPropagators"),ResponderSyntheticEvent=require("./ResponderSyntheticEvent"),ResponderTouchHistoryStore=require("./ResponderTouchHistoryStore"),accumulate=require("./accumulate"),isStartish=EventPluginUtils.isStartish,isMoveish=EventPluginUtils.isMoveish,isEndish=EventPluginUtils.isEndish,executeDirectDispatch=EventPluginUtils.executeDirectDispatch,hasDispatches=EventPluginUtils.hasDispatches,executeDispatchesInOrderStopAtTrue=EventPluginUtils.executeDispatchesInOrderStopAtTrue,responderInst=null,trackedTouchCount=0,previousActiveTouches=0,changeResponder=function(e,t){var r=responderInst;responderInst=e;null!==ResponderEventPlugin.GlobalResponderHandler&&ResponderEventPlugin.GlobalResponderHandler.onChange(r,e,t)},eventTypes={startShouldSetResponder:{phasedRegistrationNames:{bubbled:"onStartShouldSetResponder",captured:"onStartShouldSetResponderCapture"}},scrollShouldSetResponder:{phasedRegistrationNames:{bubbled:"onScrollShouldSetResponder",captured:"onScrollShouldSetResponderCapture"}},selectionChangeShouldSetResponder:{phasedRegistrationNames:{bubbled:"onSelectionChangeShouldSetResponder",captured:"onSelectionChangeShouldSetResponderCapture"}},moveShouldSetResponder:{phasedRegistrationNames:{bubbled:"onMoveShouldSetResponder",captured:"onMoveShouldSetResponderCapture"}},responderStart:{registrationName:"onResponderStart"},responderMove:{registrationName:"onResponderMove"},responderEnd:{registrationName:"onResponderEnd"},responderRelease:{registrationName:"onResponderRelease"},responderTerminationRequest:{registrationName:"onResponderTerminationRequest"},responderGrant:{registrationName:"onResponderGrant"},responderReject:{registrationName:"onResponderReject"},responderTerminate:{registrationName:"onResponderTerminate"}},ResponderEventPlugin={_getResponderID:function(){return responderInst?responderInst._rootNodeID:null},eventTypes:eventTypes,extractEvents:function(e,t,r,n){if(isStartish(e)){trackedTouchCount+=1}else{if(isEndish(e)){if(!(trackedTouchCount>=0)){console.error("Ended a touch event which was not counted in `trackedTouchCount`.");return null}trackedTouchCount-=1}}ResponderTouchHistoryStore.recordTouchTrack(e,r);var o=canTriggerTransfer(e,t,r)?setResponderAndExtractTransfer(e,t,r,n):null,s=responderInst&&isStartish(e),i=responderInst&&isMoveish(e),a=responderInst&&isEndish(e),c=s?eventTypes.responderStart:i?eventTypes.responderMove:a?eventTypes.responderEnd:null;if(c){var u=ResponderSyntheticEvent.getPooled(c,responderInst,r,n);u.touchHistory=ResponderTouchHistoryStore.touchHistory;EventPropagators.accumulateDirectDispatches(u);o=accumulate(o,u)}var d=responderInst&&"topTouchCancel"===e,p=responderInst&&!d&&isEndish(e)&&noResponderTouches(r),l=d?eventTypes.responderTerminate:p?eventTypes.responderRelease:null;if(l){var h=ResponderSyntheticEvent.getPooled(l,responderInst,r,n);h.touchHistory=ResponderTouchHistoryStore.touchHistory;EventPropagators.accumulateDirectDispatches(h);o=accumulate(o,h);changeResponder(null)}var v=ResponderTouchHistoryStore.touchHistory.numberActiveTouches;ResponderEventPlugin.GlobalInteractionHandler&&v!==previousActiveTouches&&ResponderEventPlugin.GlobalInteractionHandler.onChange(v);previousActiveTouches=v;return o},GlobalResponderHandler:null,GlobalInteractionHandler:null,injection:{injectGlobalResponderHandler:function(e){ResponderEventPlugin.GlobalResponderHandler=e},injectGlobalInteractionHandler:function(e){ResponderEventPlugin.GlobalInteractionHandler=e}}};module.exports=ResponderEventPlugin;