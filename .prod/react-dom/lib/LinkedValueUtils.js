"use strict";function _assertSingleLink(e){null!=e.checkedLink&&null!=e.valueLink?_prodInvariant("87"):void 0}function _assertValueLink(e){_assertSingleLink(e);null!=e.value||null!=e.onChange?_prodInvariant("88"):void 0}function _assertCheckedLink(e){_assertSingleLink(e);null!=e.checked||null!=e.onChange?_prodInvariant("89"):void 0}function getDeclarationErrorAddendum(e){if(e){var n=e.getName();if(n){return" Check the render method of `"+n+"`."}}return""}var _prodInvariant=require("./reactProdInvariant"),React=require("react/lib/React"),ReactPropTypesSecret=require("./ReactPropTypesSecret"),invariant=require("fbjs/lib/invariant"),warning=require("fbjs/lib/warning"),hasReadOnlyValue={button:!0,checkbox:!0,image:!0,hidden:!0,radio:!0,reset:!0,submit:!0},propTypes={value:function(e,n,r){return!e[n]||hasReadOnlyValue[e.type]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.")},checked:function(e,n,r){return!e[n]||e.onChange||e.readOnly||e.disabled?null:new Error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.")},onChange:React.PropTypes.func},loggedTypeFailures={},LinkedValueUtils={checkPropTypes:function(e,n,r){for(var a in propTypes){if(propTypes.hasOwnProperty(a)){var i=propTypes[a](n,a,e,"prop",null,ReactPropTypesSecret)}if(i instanceof Error&&!(i.message in loggedTypeFailures)){loggedTypeFailures[i.message]=!0;getDeclarationErrorAddendum(r)}}},getValue:function(e){if(e.valueLink){_assertValueLink(e);return e.valueLink.value}return e.value},getChecked:function(e){if(e.checkedLink){_assertCheckedLink(e);return e.checkedLink.value}return e.checked},executeOnChange:function(e,n){if(e.valueLink){_assertValueLink(e);return e.valueLink.requestChange(n.target.value)}if(e.checkedLink){_assertCheckedLink(e);return e.checkedLink.requestChange(n.target.checked)}if(e.onChange){return e.onChange.call(void 0,n)}}};module.exports=LinkedValueUtils;